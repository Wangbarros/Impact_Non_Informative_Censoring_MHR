wilcox_type2 = (wilcox_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,5] = wilcox_type1
results_df[i,6] = !wilcox_type2
}
results_df = as.data.frame(results_df)
names(results_df) = c('T_Equal_Size','T_NEqual_Size','T_Equal_Power','T_NEqual_Power',
'Wilcox_size','Wilcox_power')
return(results_df)
}
result = generate_data(0,0,2,2,100,100,1000)
result = generate_data(0,0,2,2,100,100,1000)
colMeans(result)
generate_data = function(mu_1, mu_2, sigma_1, sigma_2, n_1, n_2, S) {
null_hypothesis = mu_1 == mu_2
results_df = matrix(NA, nrow = S, ncol = 6)
for (i in 1:S){
sample_1 = rnorm(n_1, mean = mu_1, sd = sigma_1)
sample_2 = rnorm(n_2, mean = mu_2, sd = sigma_2)
t_equal = t.test(sample_1, sample_2, var.equal = FALSE, conf.level = 0.95)
t_nequal = t.test(sample_1, sample_2, var.equal = TRUE, conf.level = 0.95)
t_equal_reject = t_equal$p.value < 0.05
t_nequal_reject = t_nequal$p.value < 0.05
t_equal_type1 = (t_equal_reject == TRUE) & (null_hypothesis == TRUE)
t_nequal_type1 = (t_nequal_reject == TRUE) & (null_hypothesis == TRUE)
t_equal_type2 = (t_equal_reject == FALSE) & (null_hypothesis == FALSE)
t_nequal_type2 = (t_nequal_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,1] = t_equal_type1
results_df[i,2] = t_nequal_type1
results_df[i,3] = !t_equal_type2 #power is avoiding a type 2, so we invert it
results_df[i,4] = !t_nequal_type2
wilcox_test = wilcox.test(sample_1, sample_2)
wilcox_reject = wilcox_test$p.value < 0.05
wilcox_type1 = (wilcox_reject == TRUE) & (null_hypothesis == TRUE)
wilcox_type2 = (wilcox_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,5] = wilcox_type1
results_df[i,6] = !wilcox_type2
}
results_df = as.data.frame(results_df)
names(results_df) = c('T_Equal_Size','T_NEqual_Size','T_Equal_Power','T_NEqual_Power',
'Wilcox_size','Wilcox_power')
return(results_df)
}
result = generate_data(0,0,2,2,100,100,1000)
colMeans(result)
result = generate_data(0,0.5,2,2,100,100,1000)
result = generate_data(0,0.5,2,2,100,100,1000)
colMeans(result)
generate_data = function(mu_1, mu_2, sigma_1, sigma_2, n_1, n_2, S) {
null_hypothesis = mu_1 == mu_2
results_df = matrix(NA, nrow = S, ncol = 6)
for (i in 1:S){
sample_1 = rnorm(n_1, mean = mu_1, sd = sigma_1)
sample_2 = rnorm(n_2, mean = mu_2, sd = sigma_2)
t_equal = t.test(sample_1, sample_2, var.equal = FALSE, conf.level = 0.95)
t_nequal = t.test(sample_1, sample_2, var.equal = TRUE, conf.level = 0.95)
t_equal_reject = t_equal$p.value < 0.05
t_nequal_reject = t_nequal$p.value < 0.05
t_equal_type1 = (t_equal_reject == TRUE) & (null_hypothesis == TRUE)
t_nequal_type1 = (t_nequal_reject == TRUE) & (null_hypothesis == TRUE)
t_equal_type2 = (t_equal_reject == FALSE) & (null_hypothesis == FALSE)
t_nequal_type2 = (t_nequal_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,1] = t_equal_type1
results_df[i,3] = t_nequal_type1
results_df[i,2] = !t_equal_type2 #power is avoiding a type 2, so we invert it
results_df[i,4] = !t_nequal_type2
wilcox_test = wilcox.test(sample_1, sample_2)
wilcox_reject = wilcox_test$p.value < 0.05
wilcox_type1 = (wilcox_reject == TRUE) & (null_hypothesis == TRUE)
wilcox_type2 = (wilcox_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,5] = wilcox_type1
results_df[i,6] = !wilcox_type2
}
results_df = as.data.frame(results_df)
names(results_df) = c('T_Equal_Size','T_Equal_Power','T_NEqual_Size','T_NEqual_Power',
'Wilcox_size','Wilcox_power')
return(results_df)
}
result = generate_data(0,0,2,2,100,100,1000)
result = generate_data(0,0,2,2,100,100,1000)
colMeans(result)
?t.test
result = generate_data(0,0,2,2,3,3,10000)
result = generate_data(0,0,2,2,3,3,10000)
colMeans(result)
results_df = matrix[NA,nrow = 4,ncol = 6]
results_df = matrix(NA,nrow = 4,ncol = 6)
population = c(3,5)
results_df = matrix(NA,nrow = 4,ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
results_df
population = c(3,5)
results_df = matrix(NA,nrow = 4,ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
results_df
mu_1 = 0
mu_2 = 0
mu_1 = 0
mu_2 = 0
sigma_1 = 2
sigma_2 = 2
n_1 = 3
n_2 = 3
S = 10
null_hypothesis = mu_1 == mu_2
results_df = matrix(NA, nrow = S, ncol = 6)
i = 1
sample_1 = rnorm(n_1, mean = mu_1, sd = sigma_1)
sample_2 = rnorm(n_2, mean = mu_2, sd = sigma_2)
t_equal = t.test(sample_1, sample_2, var.equal = FALSE, conf.level = 0.95)
t_nequal = t.test(sample_1, sample_2, var.equal = TRUE, conf.level = 0.95)
t_equal_reject = t_equal$p.value < 0.05
t_nequal_reject = t_nequal$p.value < 0.05
t_equal_type1 = (t_equal_reject == TRUE) & (null_hypothesis == TRUE)
t_nequal_type1 = (t_nequal_reject == TRUE) & (null_hypothesis == TRUE)
t_equal_type2 = (t_equal_reject == FALSE) & (null_hypothesis == FALSE)
t_nequal_type2 = (t_nequal_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,1] = t_equal_type1
results_df[i,3] = t_nequal_type1
results_df[i,2] = !t_equal_type2 #power is avoiding a type 2, so we invert it
results_df[i,4] = !t_nequal_type2
wilcox_test = wilcox.test(sample_1, sample_2)
wilcox_reject = wilcox_test$p.value < 0.05
wilcox_test
sample_1
sample_2
wilcox_test = wilcox.test(sample_1, sample_2)
wilcox_reject = wilcox_test$p.value < 0.05
wilcox_reject
wilcox_type1 = (wilcox_reject == TRUE) & (null_hypothesis == TRUE)
wilcox_type2 = (wilcox_reject == FALSE) & (null_hypothesis == FALSE)
wilcox_type1
wilcox_type2
wilcox_type1
wilcox_type2
!wilcox_type2
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = 4,ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = 4,ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
results_df
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
results_df
data.frame(results_df)
results_df
results_df = data.frame(results_df)
results_df
results_df
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,10000))
i = i+1
}
length(population)
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
results_df
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,100))
i = i+1
}
results_df = as.data.frame(results_df)
names(results_df) = c()
results_df
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,100))
i = i+1
}
results_df
results_df = as.data.frame(results_df)
results_df
as.data.frame(results_df)
results_df
rm(list=ls())
set.seed(12345)
knitr::opts_chunk$set(echo = TRUE)
mu_1 = 0
mu_2 = 0
sigma_1 = 2
sigma_2 = 2
n_1 = 3
n_2 = 3
S = 10
i = 1
generate_data = function(mu_1, mu_2, sigma_1, sigma_2, n_1, n_2, S) {
null_hypothesis = mu_1 == mu_2
results_df = matrix(NA, nrow = S, ncol = 6)
for (i in 1:S){
sample_1 = rnorm(n_1, mean = mu_1, sd = sigma_1)
sample_2 = rnorm(n_2, mean = mu_2, sd = sigma_2)
t_equal = t.test(sample_1, sample_2, var.equal = FALSE, conf.level = 0.95)
t_nequal = t.test(sample_1, sample_2, var.equal = TRUE, conf.level = 0.95)
t_equal_reject = t_equal$p.value < 0.05
t_nequal_reject = t_nequal$p.value < 0.05
t_equal_type1 = (t_equal_reject == TRUE) & (null_hypothesis == TRUE)
t_nequal_type1 = (t_nequal_reject == TRUE) & (null_hypothesis == TRUE)
t_equal_type2 = (t_equal_reject == FALSE) & (null_hypothesis == FALSE)
t_nequal_type2 = (t_nequal_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,1] = t_equal_type1
results_df[i,3] = t_nequal_type1
results_df[i,2] = !t_equal_type2 #power is avoiding a type 2, so we invert it
results_df[i,4] = !t_nequal_type2
wilcox_test = wilcox.test(sample_1, sample_2)
wilcox_reject = wilcox_test$p.value < 0.05
wilcox_type1 = (wilcox_reject == TRUE) & (null_hypothesis == TRUE)
wilcox_type2 = (wilcox_reject == FALSE) & (null_hypothesis == FALSE)
results_df[i,5] = wilcox_type1
results_df[i,6] = !wilcox_type2
}
results_df = as.data.frame(results_df)
names(results_df) = c('T_Equal_Size','T_Equal_Power','T_NEqual_Size','T_NEqual_Power',
'Wilcox_size','Wilcox_power')
return(results_df)
}
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,100))
i = i+1
}
results_df
as.data.frame(results_df)
results_df = as.data.frame(results_df)
results_df
?as.data.frame
population = c(3,5, 50, 200)
results_df = matrix(NA,nrow = length(population),ncol = 6)
i = 1
for (pop in population){
results_df[i,] = colMeans(generate_data(0,0,2,2,pop,pop,100))
i = i+1
}
as.data.frame(results_df)
results_df
install.packages("MatchIt")
library(MatchIt)
install.packages('optmatch')
getRversion()
rm(list=ls())
library(Matching)
rm(list=ls())
library(Matching)
library(cobalt)
library(MatchIt)
library(doParallel)
library(doRNG)
library(rngtools)
library(survival)
#Need more reps
save_all = FALSE
lambda = 0.00002
eta = 2
do_balances = FALSE
random_treatment = FALSE
random_censoring = FALSE
change_info = FALSE
rep_min= 001
rep_max= rep_min+3
n_rep = rep_max-rep_min+1
seed = rep_max+rep_min
rng <- RNGseq(n_rep, rep_max+rep_min)
cl <- makeCluster(2)
registerDoParallel(cl)
cl <- makeCluster(2)
registerDoParallel(cl)
rm(list=ls())
library(Matching)
library(cobalt)
library(MatchIt)
library(doParallel)
library(doRNG)
library(rngtools)
library(survival)
#Need more reps
save_all = FALSE
lambda = 0.00002
eta = 2
do_balances = FALSE
random_treatment = FALSE
random_censoring = FALSE
change_info = FALSE
rep_min= 001
rep_max= rep_min+3
n_rep = rep_max-rep_min+1
seed = rep_max+rep_min
rng <- RNGseq(n_rep, rep_max+rep_min)
cl <- makeCluster(2)
cl <- makeCluster(2)
install_github("vthorrf/YABS")
devtools::install_github("vthorrf/YABS")
install.packages("remotes")
remotes::install_github("vthorrf/YABS")
install.packages("remotes")
remotes::install_github("vthorrf/YABS")
remotes::install_github("vthorrf/YABS")
setwd("~/Dropbox/Doktorand/Paper 1_5/Final_simple")
#setwd("D:/Dropbox/Doktorand/Paper 1_5/Final_simple")
library(survival)
source("gen_surv_data_small.R")
source("beta_bissection_ATE_JH.R")
source("marginal_beta_ATE_JH.R")
source("censor_data.R")
source("cox_reg_220823.R")
seed = 2355
n <- 1000 #Sample size
n_back = n
rep <- 50 #Number of iterations
counterfactual = TRUE
censoring_p = 0.7
target_beta = 2
type_censoring = 'uniform'
IPTW_rep <- matrix(nrow = rep, ncol = 4)
MATCH_rep <- matrix(nrow = rep, ncol = 4)
IPTW_uncens_rep <- matrix(nrow = rep, ncol = 4)
MATCH_uncens_rep <- matrix(nrow = rep, ncol = 4)
for (i in 1:rep){
n = n_back
counterfactual_text = 'notcounterfactual'
if(counterfactual == TRUE){
n <- n_back/2
counterfactual_text = 'counterfactual'
}
eta = 2
lambda = 0.00002
datalist <- gen_surv_data_ATE(n = n, counterfactual = counterfactual, lambda = lambda, eta = eta, scenario = 'A',m = 1, k = 1,
marginal_hazard_ratio = target_beta, censoring_p = censoring_p, type_censoring = type_censoring)
mhr <- datalist$marginal_hazard_ratio
chr <- datalist$conditional_hazard_ratio
data <- datalist$data
theta = datalist$theta
lambda_i = datalist$lambda_i
if(type_censoring == 'uniform'){
true_cens_p = (lambda_i/(eta*theta))*pgamma((theta/lambda_i)^eta,1/eta)*gamma(1/eta)
}
if(type_censoring == 'weibull'){
true_cens_p = 1/(1 + ((theta/lambda_i)^eta))
}
true_event_p = 1-true_cens_p
mean(data$event)
mean(true_event_p)
data$true_cens_p = true_cens_p
###########################
#Estimate propensity score
###########################
#Logistic regression and correct model specification
ps_est <- glm(Treatment ~ X1 + X2, data = data, family = 'binomial')
data$ps_est <- ps_est$fitted.values
##########################
#Calculate ATE ps-weights
##########################
data$pt_weights <- ifelse(data$Treatment == 1, 1/data$ps_est, 1/(1-data$ps_est))
##########################
#CENSORED: Calculate common IPTW
##########################
time <- data$Y
event <- data$event
covariates <- data.frame(Treatment = data[, 3])
weights <- data$pt_weights
IPTW <- cox_reg(time, event, covariates, weights)
##########################
#CENSORED: Calculate MATCH
##########################
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.2,
estimand = 'ATE', distance = logit(data$ps_est)))
matched.data_ATE = MatchIt::match.data(match.object_ATE)
matched.data_ATE$set = matched.data_ATE$subclass
matched_rows = as.numeric(row.names(matched.data_ATE))
fmla <- paste("Surv(time = Y, event = event) ~ Treatment + cluster(set)")
result_match_ATE = coxph(as.formula(fmla), data = matched.data_ATE, weights = matched.data_ATE$weights,
control = coxph.control(timefix = FALSE))
beta = result_match_ATE$coefficients[1]
rob_se <- sqrt(result_match_ATE$var[1, 1])
MATCH = list(beta = beta , exp_beta = exp(beta),
ciL = exp(beta - 1.96 * rob_se), ciU = exp(beta + 1.96 * rob_se))
##########################
#CENSORED: Calculate uncensored IPTW
##########################
time <- data$Y_true
event = rep(1,n)
weights <- data$pt_weights
IPTW_uncens_res <- cox_reg(time, event, covariates, weights)
##########################
#CENSORED: Calculate uncensored MATCH
##########################
matched.data_ATE$event_complete = rep(1,nrow(matched.data_ATE))
fmla <- paste("Surv(time = Y_true, event = event_complete) ~ Treatment + cluster(set)")
result_match_ATE = coxph(as.formula(fmla), data = matched.data_ATE, weights = matched.data_ATE$weights,
control = coxph.control(timefix = FALSE))
beta = result_match_ATE$coefficients[1]
rob_se <- sqrt(result_match_ATE$var[1, 1])
MATCH_uncens_res = list(beta = beta , exp_beta = exp(beta),
ciL = exp(beta - 1.96 * rob_se), ciU = exp(beta + 1.96 * rob_se))
IPTW_rep[i,] = as.numeric(IPTW)
MATCH_rep[i,] = as.numeric(MATCH)
IPTW_uncens_rep[i,] = as.numeric(IPTW_uncens_res)
MATCH_uncens_rep[i,] = as.numeric(MATCH_uncens_res)
if (i %% 10 == 0){
print(i)
}
}
colMeans(IPTW_rep)
colMeans(MATCH_rep)
colMeans(IPTW_uncens_rep)
colMeans(MATCH_uncens_rep)
i
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.2,
estimand = 'ATE', distance = logit(data$ps_est)))
logit(data$ps_est)
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.2,
estimand = 'ATE', distance = logit(data$ps_est)))
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.3,
estimand = 'ATE', distance = logit(data$ps_est)))
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.5,
estimand = 'ATE', distance = logit(data$ps_est)))
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 1,
estimand = 'ATE', distance = logit(data$ps_est)))
match.object_ATE = suppressWarnings(MatchIt::matchit(Treatment~X1+X2, data = data, method = 'full', caliper = 0.01,
estimand = 'ATE', distance = logit(data$ps_est)))
install.packages("curl")
install.packages("curl")
require("curl")
handle <- new_handle()
require("curl")
handle <- new_handle()
handle_setopt(handle, username = "guwa0049@ad.umu.se")
handle_setopt(handle, password = "Guest2511#") # If needed
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.sav", handle = handle)
contents <- haven::read_sav(stream)
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.sav", handle = handle)
contents <- haven::read_sav(stream)
install.packages("curl")
require("curl")
handle <- new_handle()
handle_setopt(handle, username = "guwa0049@ad.umu.se")
handle_setopt(handle, password = "Guest2511#") # If needed
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.sav", handle = handle)
contents <- haven::read_sav(stream)
df_first_stroke = haven::read_sav('~/Downloads/SMoRF/first_stroke.sav')
recurring_stroke = haven::read_sav('~/Downloads/SMoRF/recurring_stroke.sav')
?write.csv
write.csv(recurring_stroke, '~/Downloads/SMoRF/recurring_stroke.csv')
write.csv(df_first_stroke, '~/Downloads/SMoRF/first_stroke.csv')
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.csv", handle = handle)
contents <- read.csv(stream)
handle <- new_handle()
handle_setopt(handle, username = "guwa0049@ad.umu.se")
handle_setopt(handle, password = "Guest2511#") # If needed
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.csv", handle = handle)
stream
contents <- read.csv(stream)
install.packages("curl")
require("curl")
handle <- new_handle()
handle_setopt(handle, username = "guwa0049@ad.umu.se")
handle_setopt(handle, password = "Guest2511#") # If needed
stream <- curl("smb://gemfilyta.ad.umu.se/gem$/USBE/Statistik/Personuppgifter_Stat/Guilherme Barros/first_stroke.csv", handle = handle)
contents <- read.csv(stream)
